local native = require('tundra.native')

-----------------------------------------------------------------------------------------------------------------------

local common = {
	Env = {
		FLATC = "$(OBJECTDIR)$(SEP)flatc$(PROGSUFFIX)",
	},

	Includes = {
		"$(OBJECTDIR)/_generated/",
	}
}
-----------------------------------------------------------------------------------------------------------------------

local mac_opts = {
	common,
    "-Wall",
    "-Wno-switch-enum",
    "-I.",
    -- "-Weverything", "-Werror",
    "-Wno-unknown-warning-option",
    "-Wno-c11-extensions",
    "-Wno-variadic-macros",
    "-Wno-c++98-compat-pedantic",
    "-Wno-old-style-cast",
    "-Wno-documentation",
    "-Wno-reserved-id-macro",
    "-Wno-missing-prototypes",
    "-Wno-deprecated-declarations",
    "-Wno-cast-qual",
    "-Wno-gnu-anonymous-struct",
    "-Wno-nested-anon-types",
    "-Wno-padded",
    "-Wno-c99-extensions",
    "-Wno-missing-field-initializers",
    "-Wno-weak-vtables",
    "-Wno-format-nonliteral",
    "-Wno-non-virtual-dtor",
    "-Wno-undefined-reinterpret-cast", -- generated by Qt Moc
    "-DOBJECT_DIR=\\\"$(OBJECTDIR)\\\"",
    { "-O0", "-g"; Config = "*-*-debug" },
    { "-O3", "-g"; Config = "*-*-release" },
}

-----------------------------------------------------------------------------------------------------------------------

local macos = {
	Defines = {
		"PRODBG_MAC", "PRODBG_NIX",
	},

	Includes = {
		"src/prodbg",
		"src/external/flatbuffers/include",
		"$(OBJECTDIR)/_generated/",
		"$(QT5_INC)",
		"$(OBJECTDIR)",
	},

    Env = {
		FLATC = "$(OBJECTDIR)$(SEP)flatc$(PROGSUFFIX)",
		QT5_INC = native.getenv("QT5_INC"),
		QT5_BIN = native.getenv("QT5_BIN"),
		QT5_LIB = native.getenv("QT5_LIB"),

        CCOPTS =  {
            mac_opts,
        },

        CXXOPTS = {
            mac_opts,
            "-isystem $(QT5_LIB)/QtWidgets.framework/Headers",
            "-isystem $(QT5_LIB)/QtCore.framework/Headers",
            "-isystem $(QT5_LIB)/QtGui.framework/Headers",
            "-F$(QT5_LIB)",
            "-std=c++11",
        },

        SHLIBCOM = {
            {  "-Wl,-rpath,$(QT5_LIB)", "-F$(QT5_LIB)" },
        },

        SHLIBOPTS = { "-lstdc++" },
        PROGCOM = { "-lstdc++" },
    },

    ReplaceEnv = {
        QTMOC = "$(QT5_BIN)/moc",
        QTUIC = "$(QT5_BIN)/uic",
        QTRCC = "$(QT5_BIN)/rcc",
    },

    Frameworks = {
        { "Cocoa" },
        { "Metal" },
        { "QuartzCore" },
        { "OpenGL" }
    },
}

-----------------------------------------------------------------------------------------------------------------------

local gcc_opts = {
    "-I.",
    "-Wno-array-bounds", "-Wno-attributes", "-Wno-unused-value",
    "-DOBJECT_DIR=\\\"$(OBJECTDIR)\\\"",
    "-Wall", "-DPRODBG_UNIX",
    "-fPIC",
    { "-O0", "-g"; Config = "*-*-debug" },
    { "-O3", "-g"; Config = "*-*-release" },
}

-----------------------------------------------------------------------------------------------------------------------

local gcc_env = {
	common,
    Env = {
		FLATC = "$(OBJECTDIR)$(SEP)flatc$(PROGSUFFIX)",
		QT5_INC = native.getenv("QT5_INC"),
		QT5_BIN = native.getenv("QT5_BIN"),
		QT5_LIB = native.getenv("QT5_LIB"),

        CCOPTS = {
            gcc_opts,
        },

        CXXOPTS = {
            gcc_opts,
            "-std=c++11",
            "-I$(QT5_INC)",
            "-Isrc/prodbg",
            "-Isrc/external/flatbuffers/include",
			"-I$(OBJECTDIR)/_generated/",
        },

        SHLIBOPTS = { "-lstdc++" },
        PROGCOM = { "-lstdc++" },
    },

    ReplaceEnv = {
        QTMOC = "$(QT5_BIN)/moc",
        QTUIC = "$(QT5_BIN)/uic",
        QTRCC = "$(QT5_BIN)/rcc",
    },
}

-----------------------------------------------------------------------------------------------------------------------

local win64_opts = {
    "/DPRODBG_WINDOWS",
    "/EHsc", "/FS", "/MT", "/W3", "/I.", "/DUNICODE", "/D_UNICODE", "/DWIN32", "/D_CRT_SECURE_NO_WARNINGS",
    "/wd4005", "/wd4200", "/wd4152", "/wd4996", "/wd4389", "/wd4201", "/wd4152", "/wd4996", "/wd4389",
    "\"/DOBJECT_DIR=$(OBJECTDIR:#)\"",
    { "/Od"; Config = "*-*-debug" },
    { "/O2"; Config = "*-*-release" },
}

-----------------------------------------------------------------------------------------------------------------------

local win64 = {
	Defines = {
		"PRODBG_WINDOWS",
	},

    Env = {
		FLATC = "$(OBJECTDIR)$(SEP)flatc$(PROGSUFFIX)",
		QT5_INC = native.getenv("QT5_INC"),
		QT5_BIN = native.getenv("QT5_BIN"),
		QT5_LIB = native.getenv("QT5_LIB"),

        GENERATE_PDB = "1",
        CCOPTS = {
            win64_opts,
        },

        CXXOPTS = {
            win64_opts,
            "/I$(QT5_INC)",
            "/Isrc\\prodbg",
			"/Isrc/prodbg",
			"/Isrc/external/flatbuffers/include",
			"/I$(OBJECTDIR)/_generated/",
			"/I$(QT5_INC)",
			"/I$(OBJECTDIR)",
        },

        OBJCCOM = "meh",
    },

    ReplaceEnv = {
        QTMOC = "$(QT5_BIN)\\moc",
        QTUIC = "$(QT5_BIN)\\uic",
        QTRCC = "$(QT5_BIN)\\rcc",
    },
}

-----------------------------------------------------------------------------------------------------------------------

Build {
    Passes = {
        BuildTools = { Name = "Build Tools", BuildOrder = 1 },
        GenerateSources = { Name = "Generate Sources", BuildOrder = 2 },
    },

    Units = {
        "units.libs.lua",
        "units.misc.lua",
        "units.plugins.lua",
        "units.prodbg.lua",
    },

    Configs = {
        Config { Name = "macos-clang", DefaultOnHost = "macosx", Inherit = macos, Tools = { "clang-osx", "rust", "qt" } },
        Config { Name = "win64-msvc", DefaultOnHost = { "windows" }, Inherit = win64, Tools = { "msvc-vs2019", "rust", "qt" } },
        Config { Name = "linux-gcc", DefaultOnHost = { "linux" }, Inherit = gcc_env, Tools = { "gcc", "rust", "qt" } },
    },

    IdeGenerationHints = {
        Msvc = {
            PlatformMappings = {
                ['win64-msvc'] = 'x64',
            },
            VariantMappings = {
                ['release']    = 'Release',
                ['debug']      = 'Debug',
            },
        },

        MsvcSolutions = {
            ['ProDBG.sln'] = { } -- will get everything
        },
    },

    Variants = { "debug", "release" },
    SubVariants = { "default", "test" },
}

-- vim: ts=4:sw=4:sts=4

