#include "MemoryViewWidget.h"
#include "MemoryViewInternal.h"
#include <QtGui>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace prodbg {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MemoryViewWidget::MemoryViewWidget(QWidget* parent)
    : QScrollArea(parent)
    , m_internal(new MemoryViewInternal(this))
{
    setAttribute(Qt::WA_DeleteOnClose);

    setWidget(m_internal);
    setWidgetResizable(true);

    connect(m_internal, SIGNAL(currentAddressChanged(int)), this, SIGNAL(currentAddressChanged(int)));
    connect(m_internal, SIGNAL(currentSizeChanged(int)), this, SIGNAL(currentSizeChanged(int)));
    connect(m_internal, SIGNAL(overwriteModeChanged(bool)), this, SIGNAL(overwriteModeChanged(bool)));
    connect(m_internal, SIGNAL(dataChanged()), this, SIGNAL(dataChanged()));

    setFocusPolicy(Qt::NoFocus);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::insert(int index, const QByteArray& values)
{
    m_internal->insert(index, values);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::insert(int index, char value)
{
    m_internal->insert(index, value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int MemoryViewWidget::indexOf(const QByteArray& values, int from) const
{
    return m_internal->indexOf(values, from);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int MemoryViewWidget::lastIndexOf(const QByteArray& values, int from) const
{
    return m_internal->lastIndexOf(values, from);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::remove(int position, int length)
{
    m_internal->remove(position, length);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::replace(int position, int length, const QByteArray& values)
{
    m_internal->replace(position, length, values);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QString MemoryViewWidget::getReadableString()
{
    return m_internal->getReadableString();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QString MemoryViewWidget::getReadableStringFromSelection()
{
    return m_internal->getReadableStringFromSelection();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setAddressOffset(int offset)
{
    m_internal->setAddressOffset(offset);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int MemoryViewWidget::getAddressOffset() const
{
    return m_internal->getAddressOffset();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setCursorPosition(int cursorPosition)
{
    // The cursor position calculated in MemoryViewInternal is the
    // position without counting blanks. Need byte position * 2
    m_internal->setCursorPosition(cursorPosition * 2);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int MemoryViewWidget::getCursorPosition() const
{
    return m_internal->getCursorPosition() >> 1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setData(const QByteArray& data)
{
    m_internal->setData(data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QByteArray MemoryViewWidget::getData() const
{
    return m_internal->getData();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setAddressAreaColor(const QColor& color)
{
    m_internal->setAddressAreaColor(color);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QColor MemoryViewWidget::getAddressAreaColor() const
{
    return m_internal->getAddressAreaColor();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setHighlightingColor(const QColor& color)
{
    m_internal->setHighlightingColor(color);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QColor MemoryViewWidget::getHighlightingColor() const
{
    return m_internal->getHighlightingColor();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setSelectionColor(const QColor& color)
{
    m_internal->setSelectionColor(color);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QColor MemoryViewWidget::getSelectionColor() const
{
    return m_internal->getSelectionColor();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setOverwriteMode(bool mode)
{
    m_internal->setOverwriteMode(mode);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool MemoryViewWidget::getOverwriteMode() const
{
    return m_internal->getOverwriteMode();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setReadOnly(bool mode)
{
    m_internal->setReadOnly(mode);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool MemoryViewWidget::getReadOnly() const
{
    return m_internal->getReadOnly();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const QFont& MemoryViewWidget::getFont() const
{
    return m_internal->font();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setFont(const QFont& font)
{
    m_internal->setFont(font);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setAddressWidth(int addressWidth)
{
    m_internal->setAddressWidth(addressWidth);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setAddressArea(bool addressArea)
{
    m_internal->setAddressArea(addressArea);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setAsciiArea(bool asciiArea)
{
    m_internal->setAsciiArea(asciiArea);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::setHighlighting(bool mode)
{
    m_internal->setHighlighting(mode);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::undo()
{
    m_internal->undo();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MemoryViewWidget::redo()
{
    m_internal->redo();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
