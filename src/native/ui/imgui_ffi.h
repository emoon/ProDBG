#pragma once

//#include "pd_ui.h"
//#include "pd_view.h"
//#include <imgui.h>

//#include <stdbool.h>
#include <stdint.h>
//#include <stdio.h>
#include <stdbool.h>

typedef enum PDUIColorEditMode {
    PDUIColorEditMode_UserSelect = -2,
    PDUIColorEditMode_UserSelectShowButton = -1,
    PDUIColorEditMode_RGB = 0,
    PDUIColorEditMode_HSV = 1,
    PDUIColorEditMode_HEX = 2
} PDUIColorEditMode;

struct PDUIUIPainter;
struct PDRect;
typedef void* PDUITextureID;

typedef enum PDUIStyleVar {
    PDUIStyleVar_Invalid = 0,
    PDUIStyleVar_Alpha,             // float
    PDUIStyleVar_WindowPadding,     // PDVec2
    PDUIStyleVar_WindowRounding,    // float
    PDUIStyleVar_FramePadding,      // PDVec2
    PDUIStyleVar_FrameRounding,     // float
    PDUIStyleVar_ItemSpacing,       // PDVec2
    PDUIStyleVar_ItemInnerSpacing,  // PDVec2
    PDUIStyleVar_TreeNodeSpacing,   // float
    PDUIStyleVar_Count
} PDUIStyleVar;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Enumeration for get_mouse_cursor()

typedef enum PDUIMouseCursor {
    PDUIMouseCursor_Arrow = 0,
    PDUIMouseCursor_TextInput,         // When hovering over InputText, etc.
    PDUIMouseCursor_Move,              // Unused
    PDUIMouseCursor_ResizeNS,          // Unused
    PDUIMouseCursor_ResizeEW,          // When hovering over a column
    PDUIMouseCursor_ResizeNESW,        // Unused
    PDUIMouseCursor_ResizeNWSE,        // When hovering over the bottom-right corner of a window
} PDUIMouseCursor;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct PDVec2 {
    float x, y;
} PDVec2;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct PDVec4 {
    float x, y, z, w;
} PDVec4;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct PDRect {
	float x, y;
	float width, height;
} PDRect;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef unsigned int PDColor;
typedef unsigned int PDUIInputTextFlags;    // enum PDUIInputTextFlags_
typedef unsigned int PDID;
typedef unsigned int PDUISetCond;
typedef unsigned int PDUIWindowFlags;
typedef unsigned int PDUISelectableFlags;
typedef void* PDUIFont;

typedef enum PDUICol {
	foo,
} PDUICol;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void set_title(void* private_data, const char* title);
PDVec2 get_window_size();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PDVec2 get_window_pos();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_begin_child(const char* stringId, PDVec2 size, bool border, int extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_child();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_scroll_y();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_scroll_max_y();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_scroll_y(float scrollY);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_scroll_here(float centerYratio);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_scroll_from_pos_y(float posY, float centerYratio);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_keyboard_focus_here(int offset);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_font(PDUIFont font);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_font();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_style_color(PDUICol idx, PDColor col);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_style_color(int count);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_style_var(PDUIStyleVar idx, float val);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_style_var_vec(PDUIStyleVar idx, PDVec2 val);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_style_var(int count);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float imgui_get_font_size();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_item_width(float itemWidth);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_item_width();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_calc_item_width();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_allow_keyboard_focus(bool v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_allow_keyboard_focus();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_text_wrap_pos(float wrapPosX);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_text_wrap_pos();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_button_repeat(bool repeat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_button_repeat();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_begin_group();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_group();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_separator();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_same_line(int columnX, int spacingW);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_spacing();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_dummy(PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_indent();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_un_indent();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_columns(int count, const char* id, bool border);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_next_column();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_get_column_index();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_column_offset(int columnIndex);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_column_offset(int columnIndex, float offset);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_column_width(int columnIndex);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_get_columns_count();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_cursor_pos();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_cursor_pos_x();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_cursor_pos_y();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_cursor_pos(PDVec2 pos);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_cursor_pos_x(float x);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_cursor_pos_y(float y);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_cursor_screen_pos();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_cursor_screen_pos(PDVec2 pos);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_align_first_text_height_to_widgets();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_text_line_height();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_text_line_height_with_spacing();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_items_line_height_with_spacing();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_id_str(const char* strId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_id_str_range(const char* strBegin, const char* strEnd);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_id_ptr(const void* ptrId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_push_id_int(const int intId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_pop_id();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDID imgui_get_id_str(const char* strId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDID imgui_get_id_str_range(const char* strBegin, const char* strEnd);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDID imgui_get_id_ptr(const void* ptrId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_text(const char* format, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_text_v(const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_text_colored(const PDColor col, const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_text_colored_v(const PDColor col, const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_text_disabled(const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_text_disabledV(const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_text_wrapped(const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_text_wrapped_v(const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_text_unformatted(const char* text, const char* text_end);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_label_text(const char* label, const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_label_textV(const char* label, const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_bullet();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_bullet_text(const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void bullet_text_v(const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_button(const char* label, const PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_small_button(const char* label);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_invisible_button(const char* strId, const PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_image(PDUITextureID user_texture_id, const PDVec2 size, const PDVec2 uv0, const PDVec2 uv1, const PDColor tintColor, const PDColor borderColor);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_image_button(PDUITextureID user_texture_id, const PDVec2 size, const PDVec2 uv0, const PDVec2 uv1, int framePadding, const PDColor bgColor, const PDColor tintCol);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_collapsing_header(const char* label, const char* strId, bool displayFrame, bool defaultOpen);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_checkbox(const char* label, bool* v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_checkbox_flags(const char* label, unsigned int* flags, unsigned int flagsValue);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_radio_button_bool(const char* label, bool active);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_radio_button(const char* label, int* v, int v_button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_combo(const char* label, int* currentItem, const char** items, int itemsCount, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_combo2(const char* label, int* currentItem, const char* itemsSeparatedByZeros, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_combo3(const char* label, int* currentItem, bool (*itemsGetter)(void* data, int idx, const char** out_text), void* data, int itemsCount, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_color_button(const PDColor col, bool smallHeight, bool outlineBorder);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_color_edit3(const char* label, float col[3]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_color_edit4(const char* label, float col[4], bool showAlpha);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_color_edit_mode(PDUIColorEditMode mode);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_plot_lines(const char* label, const float* values, int valuesCount, int valuesOffset, const char* overlayText, float scaleMin, float scaleMax, PDVec2 graphSize, unsigned int stride);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_plot_lines2(const char* label, float (*valuesGetter)(void* data, int idx), void* data, int valuesCount, int valuesOffset, const char* overlayText, float scaleMin, float scaleMax, PDVec2 graphSize);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_plot_histogram(const char* label, const float* values, int valuesCount, int valuesOffset, const char* overlayText, float scaleMin, float scaleMax, PDVec2 graphSize, unsigned int stride);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_plot_histogram2(const char* label, float (*valuesGetter)(void* data, int idx), void* data, int valuesCount, int valuesOffset, const char* overlayText, float scaleMin, float scaleMax, PDVec2 graphSize);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void* imgui_sc_input_text(const char* label, float xSize, float ySize, void (*callback)(void*), void* user_data);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_float(const char* label, float* v, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_float2(const char* label, float v[2], float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_float3(const char* label, float v[3], float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_float4(const char* label, float v[4], float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_angle(const char* label, float* v_rad, float vDegreesMin, float vDegreesMax);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_int(const char* label, int* v, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_int2(const char* label, int v[2], int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_int3(const char* label, int v[3], int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_slider_int4(const char* label, int v[4], int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_vslider_float(const char* label, const PDVec2 size, float* v, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_vslider_int(const char* label, const PDVec2 size, int* v, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_float(const char* label, float* v, float vSpeed, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_float2(const char* label, float v[2], float vSpeed, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_float3(const char* label, float v[3], float vSpeed, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_float4(const char* label, float v[4], float vSpeed, float vMin, float vMax, const char* displayFormat, float power);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_int(const char* label, int* v, float vSpeed, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_int2(const char* label, int v[2], float vSpeed, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_int3(const char* label, int v[3], float vSpeed, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_drag_int4(const char* label, int v[4], float vSpeed, int vMin, int vMax, const char* displayFormat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_text(const char* label, char* buf, int buf_size, int flags, void (*callback)(void*), void* user_data);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_text_multiline(const char* label, char* buf, unsigned int buf_size, const PDVec2 size, PDUIInputTextFlags flags, void (*callback)(void*), void* user_data);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_float(const char* label, float* v, float step, float step_fast, int decimal_precision, PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_float2(const char* label, float v[2], int decimal_precision, PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_float3(const char* label, float v[3], int decimal_precision, PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_float4(const char* label, float v[4], int decimal_precision, PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_int(const char* label, int* v, int step, int step_fast, PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_int2(const char* label, int v[2], PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_int3(const char* label, int v[3], PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_input_int4(const char* label, int v[4], PDUIInputTextFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_tree_node(const char* str_label_id);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_tree_node_str(const char* strId, const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_tree_node_ptr(const void* ptrId, const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// bool imgui_tree_node_str_v(const char* strId, const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// bool imgui_tree_node_ptr_v(const void* ptrId, const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_tree_push_str(const char* strId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_tree_push_ptr(const void* ptrId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_tree_pop();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_next_tree_node_opened(bool opened, PDUISetCond cond);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_selectable(const char* label, bool selected, PDUISelectableFlags flags, const PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_selectable_ex(const char* label, bool* p_selected, PDUISelectableFlags flags, const PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_list_box(const char* label, int* currentItem, const char** items, int itemsCount, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_list_box2(const char* label, int* currentItem, bool (*itemsGetter)(void* data, int idx, const char** out_text), void* data, int itemsCount, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_list_box_header(const char* label, const PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_list_box_header2(const char* label, int itemsCount, int heightInItems);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_list_box_footer();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_tooltip(const char* fmt, ...);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_set_tooltipV(const char* fmt, va_list args);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_begin_tooltip();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_tooltip();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_main_menu_bar();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_main_menu_bar();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_menuBar();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_menu_bar();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_begin_menu(const char* label, bool enabled);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_menu();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_menu_item(const char* label, const char* shortcut, bool selected, bool enabled);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_menu_item_ptr(const char* label, const char* shortcut, bool* p_selected, bool enabled);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_open_popup(const char* strId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_begin_popup(const char* strId);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_popup_modal(const char* name, bool* p_opened, PDUIWindowFlags extraFlags);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_popup_context_item(const char* strId, int mouse_button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_popup_context_window(bool also_over_items, const char* strId, int mouse_button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_popup_context_void(const char* strId, int mouse_button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_popup();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_close_current_popup();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_popup_context(void* priv_data);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_popup_context(void* priv_data);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_value_bool(const char* prefix, bool b);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_value_int(const char* prefix, int v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_value_u_int(const char* prefix, unsigned int v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_value_float(const char* prefix, float v, const char* float_format);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_color(const char* prefix, const PDColor col);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_log_to_tty(int maxDepth);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_log_to_file(int maxDepth, const char* filename);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_log_to_clipboard(int maxDepth);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_log_finish();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_log_buttons();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_item_hovered();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_item_hovered_rect();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_item_active();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_item_visible();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_any_item_hovered();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_any_item_active();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_item_rect_min();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_item_rect_max();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_item_rect_size();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_window_hovered();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_window_focused();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_root_window_focused();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_root_window_or_any_child_focused();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_rect_visible(const PDVec2 itemSize);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_pos_hovering_any_window(const PDVec2 pos);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 float imgui_get_time();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int imgui_get_frame_count();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 const char* imgui_get_style_col_name(PDUICol idx);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_calc_item_rect_closest_point(const PDVec2 pos, bool onEdge, float outward);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_calc_text_size(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_calc_list_clipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_begin_child_frame(PDID id, const struct PDVec2 size);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_end_child_frame();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_color_convert_rg_bto_hsv(float r, float g, float b, float* out_h, float* out_s, float* out_v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_color_convert_hs_vto_rgb(float h, float s, float v, float* out_r, float* out_g, float* out_b);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_key_down(int key_index);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_key_pressed(int key_index, bool repeat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_key_released(int key_index);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TODO: Fix me

 bool imgui_is_key_down_id(uint32_t keyId, int repeat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_down(int button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_clicked(int button, bool repeat);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_double_clicked(int button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_released(int button);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_hovering_window();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_hovering_any_window();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_hovering_rect(const struct PDVec2 rectMin, const struct PDVec2 rectMax);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 bool imgui_is_mouse_dragging(int button, float lockThreshold);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_mouse_pos();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDVec2 imgui_get_mouse_drag_delta(int button, float lockThreshold);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_reset_mouse_drag_delta(int button);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 PDUIMouseCursor imgui_get_mouse_cursor();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_set_mouse_cursor(PDUIMouseCursor type);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void imgui_fill_rect(PDRect rect, PDColor color);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void imgui_fill_convex_poly(void* verts, int count, PDColor color, int aa);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// void imgui_fill_circle(PDVec2 pos, float radius, PDColor color, int num_segments, int aa);


